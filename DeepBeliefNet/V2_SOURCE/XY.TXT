// This file contains the outline of XY perimeter analysis

   n = Number of XY points ;

   xr = [Allocate memory for n doubles] ;
   xi = [Allocate memory for n doubles] ;
   mag = [Allocate memory for n doubles] ;
   phase = [Allocate memory for n doubles] ;
   fft = new FFT ( n , 1 , 1 ) ;

   for all cases {

      Get all (X,Y) pairs for this case into record, which is 2n long

      for (i=0 ; i<n ; i++) {
         xr[i] = record[2*i] ;
         xi[i] = record[2*i+1] ;
         }
      fft->cpx ( xr , xi , 1 ) ;  // Transform to frequency domain
      for (i=0 ; i<n ; i++) {     // fft sums, does not do this division
         xr[i] /= n ;
         xi[i] /= n ;
         }

      if (Raw Fourier or location normalized) {   // If location normalized will omit [0] from default predictors
         for (i=0 ; i<n ; i++) {
            record[2*i] = xr[i] ;
            record[2*i+1] = xi[i] ;
            }
         }

      else {  // Normalize scale and phase
         for (i=0 ; i<n ; i++) {
            mag[i] = sqrt ( xr[i] * xr[i] + xi[i] * xi[i] ) ;
            if (mag[i] > 1.e-30)
               phase[i] = atan2 ( xi[i] , xr[i] ) ;
            else
               phase[i] = 0.0 ;
            }

         if (Force clockwise)
            is_clockwise = 1 ;
         else if (Force counter-clockwise)
            is_clockwise = 0 ;
         else
            is_clockwise = mag[1] >= mag[n-1] ;

         // Normalize the scale
         if (is_clockwise) {
            scale = mag[1] ;
            theta = phase[1] ;
            }
         else {
            scale = mag[n-1] ;
            theta = -phase[n-1] ;
            }
         if (scale < 1.e-30)    // Will never happen in valid app
            scale = 1.e-30 ;
         for (i=1 ; i<n ; i++)
            mag[i] /= scale ;

         // Normalize the phase for positive frequencies
         for (i=1 ; i<=n/2 ; i++)
            phase[i] -= i * theta ;

         // Normalize the phase for negative frequencies
         k = (n % 2) ? (n/2) : (n/2-1) ;
         for (i=1 ; i<=k ; i++)
            phase[n-i] += i * theta ;

         // Recompute the normalized Fourier coefficients
         for (i=0 ; i<n ; i++) {
            xr[i] = mag[i] * cos(phase[i]) ;
            xi[i] = mag[i] * sin(phase[i]) ;
            }

         // Put the coefs back into the database
         for (i=0 ; i<n ; i++) {
            record[2*i] = xr[i] ;
            record[2*i+1] = xi[i] ;
            }
         } // Normalize scale and starting point

      Advance to next case
      } // For all cases


Variable names

   n_pred = 0 ;   // Will index default inputs
   n_vars = 0 ;

   for (i=0 ; i<n ; i++) {    // For all XY pairs

      if (Fourier variables)
         Put name "Real_i" in dataset name array at slot n_vars ;
      else
         Put name "X_i" in dataset name array at slot n_vars ;

      if (Raw data) {        // Raw XY points, no Fourier
         Put name "X_i" in default predictor list at slot n_pred
         ++n_pred ;
         }

      else if (i <= maxfreq  ||  (n-i) <= maxfreq) {   // Use both positive and negative frequencies
         if (Raw Fourier) {
            Put variable "Real_i" in default predictor list at slot n_pred
            ++n_pred ;
            }
         else if (Location-normalized Fourier) {
            if (i > 0) {  // If centered, we omit [0] terms
               Put variable "Real_i" in default predictor list at slot n_pred
               ++n_pred ;
               }
            }
         else if (Scale/start normalized Fourier) {
            if (i > 0) {
               if (is_clockwise) {
                  if (i != 1) {
                     Put variable "Real_i" in default predictor list at slot n_pred
                     ++n_pred ;
                     }
                  }
               else {
                  if (i != n-1) {
                     Put variable "Real_i" in default predictor list at slot n_pred
                     ++n_pred ;
                     }
                  }
               }
            }
         }

      ++n_vars ;

      if (Fourier variables)
         Put name "Imag_i" in dataset name array at slot n_vars ;
      else
         Put name "Y_i" in dataset name array at slot n_vars ;

      if (Raw data) {        // Raw XY points, no Fourier
         Put name "Y_i" in default predictor list at slot n_pred
         ++n_pred ;
         }

      else if (i <= maxfreq  ||  (n-i) <= maxfreq) {   // Use both positive and negative frequencies
         if (Raw Fourier) {
            Put variable "Imag_i" in default predictor list at slot n_pred
            ++n_pred ;
            }
         else if (Location-normalized Fourier) {
            if (i > 0) {  // If centered, we omit [0] terms
               Put variable "Imag_i" in default predictor list at slot n_pred
               ++n_pred ;
               }
            }
         else if (Scale/start normalized Fourier) {
            if (i > 0) {
               if (is_clockwise) {
                  if (i != 1) {
                     Put variable "Imag_i" in default predictor list at slot n_pred
                     ++n_pred ;
                     }
                  }
               else {
                  if (i != n-1) {
                     Put variable "Imag_i" in default predictor list at slot n_pred
                     ++n_pred ;
                     }
                  }
               }
            }
         }

      ++n_vars ;
      }
