The program MLFN.EXE is the program whose operation is described in the
last chapter, "Using the MLFN Program."
Complete source code for this program can be found in the subdirectory
\MLFN on this disk.

This version was compiled for 32-bit machines.  The implication is that
it can only be run on 386 or higher processors.
To recompile it for 16-bit processors, change the flag VERSION_16_BIT
in CONST.H to 1.  The resulting version will have greatly reduced power.

In order to accomodate users whose computer has no floating-point processor,
this version has been compiled to use subroutine calls rather than in-line
floating-point code.  The result is much slower and less accurate operation.
Serious users are encouraged to recompile it with the 'ff' option.

Portions of the source code were originally published in PRACTICAL NEURAL
NETWORK RECIPES IN C++ by Timothy Masters, Copyright (c) 1993 by
Academic Press, Inc.
The following subroutines of the MLFN program originally appeared in that
previous publication in whole or in part: AN1.CPP, CONFUSE.CPP, CONJGRAD.CPP,
CONTROL.CPP, DIRECMIN.CPP, DOTPROD.CPP, EXECUTE.CPP, MEM.CPP, MESSAGES.CPP,
MLFN.CPP, PARSDUBL.CPP, SVDCMP.CPP, TRAIN.CPP, WT_SAVE.CPP.

The subdirectory \VALIDATE on this disk contains the validation command files
listed at the end of the last chapter of the book.  These may be useful to
readers who recompile the program for their own platform.  Please note that
the conjugate gradient algorithm, when applied to ill-conditioned problems
like those contained in this validation suite, is extremely sensitive to
floating-point rounding methods.  It is to be expected that different
compilers may produce different results.

The subdirectory \MISC on this disk contains source code for all of the
important examples listed in the book.

This disk contains an updated version of MLFN.
The following bugs in the original version of MLFN have been fixed:
  1) FLRAND was limited to only 2^19 different values.  This version has the
     full 2^32 different values.  Because of shuffling, this is actually an
     insignificant problem for MLFN, but it's theoretically nicer this way.
     Also, other applications may expect the full range of possibilities.
  2) The command ZERO CONFUSION ROW is now allowed only in CLASSIFICATION 
     output mode.  In the original version, using that command in other modes
     would cause a serious runtime error.
  4) There was a logic error near the end of AN1_CJ.CPP.  This has been
     repaired in the new version.  The error had the following implication:
     All PRETRIEs were done correctly, and refinement was then also done
     correctly.  But thereafter, refinement of subsequent retires was done
     only on networks that beat the refined best, rather than the old
     best before refinement.  The result is that potential winners could
     be missed.  In practice, this is not a serious problem, but it is an
     annoyance that needed repair.
  5) The AN1_CJ algorithm caused a 'divide by zero' error if the user
     requested exactly one annealing temperature.  This has been eliminated.

Please remember that the programs and algorithms in this book/disk set
have been included for instructional purposes only.  All large programming
projects contain bugs.  Even though extensive testing has been done,
neither the publisher nor the author make any representations or warranties
concerning the correctness of these programs and algorithms, or their
suitability for any particular task.  They should not be used in any
application in which there is risk of injury or serious loss.
The publisher and author shall not be liable for any loss incurred as a
result of the use of these programs or algorithms.
